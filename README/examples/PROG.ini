PROGRAM INI;
[COMMAND]
C=45
0=COM
1=DIO
2=ACHV
3=ACHI
4=WAIT
5=SLEEP
6=SMB
7=KEY
8=KEYSTRING
9=DAC
10=COUNTER
11=ALLKEYTEST
12=POST
13=RJ1145
14=END
15=ERRORCODE
16=SENDBARCODE
17=YESNO
18=CLOSESMB
19=DIOREAD
20=SENDMAC
21=SENDGUID
22=GPIBCONFIG
23=SETHPPOWER
24=READGPIBDATA
25=HPOUTPUT
26=ACHWAVE
27=DACPOINT
28=NIDIO
29=NIDIOREAD
30=NIDIODIR
31=ECHO
32=GPIBSTR
33=RUNPCEXE
34=WRITEBARCODE
35=IF
36=VARREAL
37=JUMP
38=GETGPIBSTR
39=DIOMACRO
40=VARSTRING
41=WAITFILE
42=VARRANGE
43=POWERSAFE
44=ACHFREQ
45=TIMESTOP


[COM]
C=5
1= COM  Command
2=經由 com port送資料到 UUT端(含enter鍵) 如果要送空白字
3=可以下 COM SPACE (只有一個空白不含enter)
4=COM OFF , COM ON 可開關 COM PORT
5=COM ON 38400 在ON 時可以設定 COM PORT的傳輸率
99=0

[DIO]
C=5
1= DIO  name  value
2=參考 DIO.INI  [DIO] setion 和 name 可以得到可以使用的命令
3=可藉由 data 欄位來選擇以經在[DIO]中建的資料
4=所需的資料可在DIO.INI中先行設定
5= DIO data1  22
6=如果只有一個bit也可用 DIO data1  ON   ; DIO data1 OFF 來做開關的動作
99=DIO


[DIOMACRO]
C=6
1= DIOMACRO  name  
2=參考DIO.INI [DIOMICRO] Setion 和 name 可以得到可以使用的的命令
3=可藉由 data 欄位來選擇以經在[DIOMICRO]中建的資料
4=所需的資料可在DIO.INI中先行設定
5=主要可以用來設定多個 DIO 命令成為一個命令,待程式執行時再行解開
6= DIOMACRO POWERON
99=DIOMICRO

[DIOREAD]
C=8
1= DIOREAD name data  / DIOREAD name data >>
2= DIOREAD name = var / DIOREAD name = var >>
3=參考DIO.INI [DIO] setion-name 設定name & 比較資料data 
4=如果NI DIO 取回的資料和data 相同則 TRUE 否則回傳 FALSE    
5=可以存到變數中來判斷 DIOREAD  DATA1 = ABCD
6=再以 IF ( ABCD > 234 ) THEN @ERROR1 ELSE @ERROR2
7=DIOREAD  DATA1 = ABCD >> 則會將資料也存到VAR.INI中的savevar
8=section 的變數資料,最後會加到testlog.txtvar之中
99=DIO
 

[ACHV]
C=11
1=ACHV name / ACHV name >>
2=ACHV name = var / ACHV name = var >>
3=參考DIO.INI [ACHV] Setion 和 name 可以得到可以使用的的命令
4=可藉由 data 欄位來選擇以經在[ACHV]中建的資料
5= 如果有等號則會存到var.ini中的實數變數中,不判斷對錯
6=ACHV  TEST1 = MYTEST 結果會存到 VAR.INI中的MYTEST變數中
7=ACHV  TEST1 = MYTEST >> 則會將資料也存到VAR.INI中的savevar
8=section 的變數資料,最後會加到testlog.txtvar之中,不判斷對錯 
9=ACHV  TEST1  >> 則會將資料也存到VAR.INI中的savevar section 
10=的變數資料用errorcode為名稱,最後會加到testlog.txtvar之中
11=,會判斷對錯
99=ACHV

[ACHI]
C=11
1=ACHI name / ACHI name >>
2=ACHI name = var / ACHI name = var >>
3=參考 DIO.INI [ACHI] setion & name==> 
4=可藉由 data 欄位來選擇以經在[ACHI]中建的資料
5=如果有等號則會存到var.ini中的實數變數中,不判斷對錯
6=ACHI  TEST1 = MYTEST 結果會存到 VAR.INI中的MYTEST變數中
7=ACHI  TEST1 = MYTEST >> 則會將資料也存到VAR.INI中的savevar
8=section 的變數資料,最後會加到testlog.txtvar之中,不判斷對錯 
9=ACHI  TEST1  >> 則會將資料也存到VAR.INI中的savevar section 
10=的變數資料用errorcode為名稱,最後會加到testlog.txtvar之中
11=,會判斷對錯
99=ACHI


[WAIT]
C=13
1=WAIT DATA,TIMEOUT / WAIT DATA = TEST,TIMEOUT
2=WAIT DATA >>,TIMEOUT / WAIT DATA = TEST >>,TIMEOUT
3=等待COM port送過來的資料來做核對,timeout等待時間(1000)表1秒 
4=Default 是3分鐘: 例: WAIT C:>,1000 表等待一秒,超過時間就fail
5=WAIT (crc32 is 0xAB744A4C~crc32 is 0x87F536A4) 這個是一個or 的組合
6= ~ 表or,  & 表 and
7=WAIT crc32 is 0xAB744A4C = TEST,2000 會將找到或找不到寫到字串變數
8=TEST 中 TEST= TRUE  or  TEST= FALSE可用IF 來做判斷
9=在有 = 號的狀態下等到時間超過時不會停止,只會設定變數為FALSE然後繼
10=續往下測試
11=WAIT ABC = TEST >>,2000    WAIT ABC >>,2000 沒有= 號的錯鋘時直接停
12=止,  >> 則會將資料也存到VAR.INI中的savevar section 的變數資料
13=最後會加到testlog.txtvar之中
99=0


[WAITFILE]
C=6
1=WAIT WAITString,TIMEOUT
2=是等待某個目錄內是否有waitstring的檔案名稱出現在host目錄中
3=timeout等待時間(1000)表1秒Default 是3分鐘
4=例: WAITFILE C:\TEMP\TEST.TXT,1000  表示等TEST.TXT這個檔案一秒鐘,
5=超過時間就FAIL,如果要以這個通知錯誤,可用UUT_FAIL.DAT
6=來告知其失敗:  要放在同宣告的相同路徑中C:\TEMP\ 
99=0


[SLEEP]
C=2
1=SLEEP	  delay-time
2=delay ms times ==> SLEEP 1000   (1 second)不作任何事
99=0

[SMB]
C=4
1=SMB    name	
2=設定usi smart battery borad電源
3=參考DIO.INI中的 ACHI項目中的名稱
4=例:SMB OperaTionChargeTest1
99=ACHI

[KEY]
C=3 
1=KEY DATA
2=由dio介面送 key值到 UUT 鍵盤 ==> KEY A 不含ENTER,參考
3=DIO.INI [KEY]鍵值&[DIO] KEYDATA 的DIO port 設定
99=KEY

[KEYSTRING]
C=4 
1=KEYSTRING DATA 
2=由dio介面送字串到 UUT keyboard ==> KEYSTRING  test?
3=(?is enter) 其餘設定同 KEY的資料
4=透過dio介面送資料,一個字元一個字元的傳送
99=0

[DAC]
C=4
1= DAC NAME
2=設定 DAC 資料參考 DIO.INI [DAC] setion & name
3=DAC SINWAVE ON  (ON | OFF),即NI analog 輸出設定
4=目前以輸出sine wave
99=DAC

[ALLKEYTEST]
C=3
1= ALLKEYTEST
2=可以修改 DIO.INI [ALLKEY] setion 的值來產生輸出順序
3=是借由DIO PORT來做KEY 值的輸出
99=0

[POST]
C=3
1= POST data,timeout
2=經由LPT PORT接收等待post code data==> POST A0,3000
3=timeout等待時間(1000)表1秒Default 是3分鐘
99=0

[RJ1145]
C=3
1= RJ1145
2=經由 DIO.INI [RJDATA] setion 的設定,要配合function Board
3=來產生 loop back 功能,用在IBM UUT
99=0

[END]
C=2
1=END
2=fctcommand.txt測試結束時要加這個資料,才能得到測試完成的結果
99=0

[ERRORCODE]
C=5
1= ERRORCODE   data 
2=如果UUT端沒有定義錯誤碼,可自行設定測試流程中的錯誤碼
3=ERRORCODE 0001, UUT端可透過COM port送error code到
4=HOST 格式如後 ERROR-CODE:0001  ,ERROR-CODE:會被忽略只
5=保留 0001
99=0

[SENDBARCODE]
C=2
1= SENDBARCODE
2=透過NI DIO 將Barcode經由 UUT keyboard 送到 UUT  端
99=0

[YESNO]
C=7
1= YESNO Data / YESNO = ABC
2=YESNO Data
3=設定message box 讓使用者確認 YES OR NO,按YES會送'YES'到
4=COM port並且繼續執行下面的指令,按NO 會送'NO'到COM port
5=並且顯示錯誤碼,停止執行其它指令,data為顯示字串
6=YESNO  = ABC 可單純顯示變數字串,但需存在在VAR.INI之中
7=如不存在則會顯示 ABC: OK
99=0

[CLOSESMB]
C=2
1= CLOSESMB
2=關閉所有smart battery board的電源設定
99=0

[COUNTER]
C=10
1=COUNTER NAME / COUNTER NAME >>
2=COUNTER NAME = MYTEST / COUNTER NAME = MYTEST >>
3=參考 DIO.INI  [COUNTER] setion & name==>COUNTER VGAMODE 
4=主要在量取全波和半波的比值,由上下限來判斷正確與否
5=COUNTER  VGAMODE = MYTEST 結果會存到 VAR.INI中的MYTEST變數中
6=COUNTER  VGAMODE = MYTEST >> 則會將資料也存到VAR.INI中的savevar
7=section 的變數資料,最後會加到testlog.txtvar之中,不判斷對錯
8=COUNTER  VGAMODE >> 則會將資料也存到VAR.INI中的savevar section 
9=的變數資料用errorcode為名稱,最後會加到testlog.txtvar之中
10=會判斷對錯 
99=COUNTER

[SENDMAC]
C=6
1=SENDMAC Dos-command /  SENDMAC Dos-command~
2=經由 barcode.ini取得 MAC data , Dos-command 是UUT端要寫入
3=MAC資料的 DOS 指令(by chipset support),指令會透過com port 
4=結合Dos-command 和MAC 資料來執行,如果COMMAND要和MAC連在一
5=起則下 Command~ 則指令會成為CommandMAC不然是成為
6=Command  MAC
99=0

[SENDGUID]
C=6
1=SENDGUID Dos-command /  SENDGUID Dos-command~
2=經由 barcode.ini取得 GUID data , Dos-command 是UUT端要寫入
3=GUID資料的 DOS 指令(by chipset support),指令會透過com port 
4=結合Dos-command 和GUID 資料來執行,如果COMMAND要和GUID 連在一
5=起則下 Command~ 則指令會成為CommandMAC不然是成為
6=Command  GUID 
99=0


[WRITEBARCODE]
C=6
1=WRITEBARCODE Dos-command /  WRITEBARCODE Dos-command~
2=經由 barcode.ini取得 BARCODE data , Dos-command 是UUT端要寫入
3=BARCODE 資料的 DOS 指令(by chipset support),指令會透過com port 
4=結合Dos-command 和BARCODE 資料來執行,如果COMMAND要和BARCODE
5=連在一起則下 Command~ 則指令會成為CommandBARCODE 不然是成為
6=Command  BARCODE
99=0


[POWERSAFE]
C=3
1=POWERSAFE ON/OFF
2=設定ON 時,一但電源測試錯誤立即斷電,OFF時可以重試
3=Default為OFF
99=0

[GPIBCONFIG]
C=3
1=GPIBCONFIG Name
2=經由 DIO.INI [GPIBConfig] setion & name==>GPIBConfig AAA
3=透過GPIB來設定 PowerSupply或GPIB介面的設備
99=GPIBConfig

[SETHPPOWER]
C=3
1=SETHPPOWER Name
2=經由 DIO.INI  [HPPOWERSET] setion & name資料來設定GPIB
3=PowerSupply --SETHPPOWER SET37V
99=HPPOWERSET

[READGPIBDATA]
C=12
1=READGPIBDATA NAME / READGPIBDATA NAME >>
2=READGPIBDATA NAME = ABC / READGPIBDATA NAME = ABC >>
3=經由 DIO.INI  [GPIBDATA] setion & name的資料來設定比較值
4=READGPIBDATA HPCurrent,可借由TYPE 選擇是要讀取電壓或電流
5=值再與 UP & LOW 值比較後回傳TRUE OR FASLE 只針對HP POWER
6=READGPIBDATA HPCurrent = ABC 可將回傳的資料存到變數中
7=READGPIBDATA HPCurrent = ABC >> 則會將資料也存到VAR.INI中的
8=savevar section 的變數資料,最後會加到testlog.txtvar之中,不判 
9=斷對錯 
10=READGPIBDATA HPCurrent  >> 會自行判斷對錯,會將資料存到VAR.INI 
11=中的savevar section 的變數資料用errorcode為名稱,最後會加到
12=testlog.txtvar之中會判斷對錯
99=GPIBDATA

[HPOUTPUT]
C=2
1=HPOUTPUT ON/OFF
2=經由 GPIB介面設定HP POWER 輸出是ON or OFF==> HPOUTPUT ON
99=0

[GPIBSTR]
C=2
1=GPIBSTR DATA
2=DATA字串透過GPIB PORT來送到GPIB DEVICE
99=0


[GETGPIBSTR]
C=7
1=GETGPIBSTR DATA = varName
2=GETGPIBSTR DATA = varName >>
3=DATA為要對GPIB PORT 下達要回傳資料的COMMAND,需給變數參數名稱
4=GETGPIBSTR CURR:STATE = ABC 等號前面為DEVICE COMMAND,
5=後面為要存的變數名稱ABC
6=savevar section 的變數資料,最後會加到testlog.txtvar之中,不判
7=斷對錯
99=0


[ACHWAVE]
C=10
1=ACHWAVE name / ACHWAVE name >>
2=ACHWAVE name = var / ACHWAVE name = var >>
3=經由 DIO.INI [ACHWAVE]取得ACH wave 高點和低點差值是否在
4=top<->low的區間內==> ACHWAVE AUDIO
5=可存到變數名稱中 ACHWAVE AUDIO = ABCD
6=ACHWAVE AUDIO = ABC >> 則會將資料也存到VAR.INI中的savevar section
7=的變數資料,最後會加到testlog.txtvar之中,不判斷對錯
8=ACHWAVE AUDIO   >> 會自行判斷對錯,會將資料存到VAR.INI 
9=中的savevar section 的變數資料用errorcode為名稱,最後會加到 
10=testlog.txtvar之中
99=ACHWAVE


[ACHFREQ]
C=21
1=ACHFREQ name / ACHFREQ name >>
2=ACHFREQ name = var / ACHFREQ name = var >>
3=經由 DIO.INI [ACHFREQ]的設定可以判斷 頻率, offset, 峰對峰的
4=值差,次頻率傅利頁轉換的大小值
5=	ACHFREQ  FEI
6=可存到變數名稱中 ACHREQ FEI = ABCD 會自動以ABCD產生四組資料
7=	ABCD1 = 峰對峰的值差
8=	ABCD2 = OFFSET
9=      ABCD3 = 頻率
10=	ABCD4 = 次頻率的傅利頁轉換的值
11=ACHREQ FEI = ABCD >> ,不判斷對錯,會將資料也存到VAR.INI中的
12=savevar section的變數資料,最後會加到testlog.txtvar之中但只
13=存二個值 Offset & 頻率
14=	ABCDO = OFFSET
15=	ABCDF = 頻率
16=ACHREQ FEI  >> 會自行判斷對錯,會將資料存到VAR.INI
17=中的savevar section 的變數資料用errorcode為名稱,最後會加到
18=testlog.txtvar之中
19=但只存二個值 Offset & 頻率
20=	errorcodeO = OFFSET
21=	errorcodeF = 頻率
99=ACHFREQ


[DACPOINT]
C=3
1=DACPOINT Name
2=經由 DIO.INI [DACPOINT] setion & name來設定固定的DAC輸出
3=電壓===>  DACPOINT V3P7 
99=DACPOINT



[NIDIO]
C=3
1=NIDIO Name Value
2=參考 DIO.INI  [DIO] setion & name==>NIDIO DATA1 255
3=name 可在DIO.INI中自行設定所需的資料
99=DIO


[NIDIOREAD]
C=13
1=NIDIOREAD name data / NIDIOREAD name DATA >>
2=NIDIOREAD name = var / NIDIOREAD name = var >>
3=參考DIO.INI [DIO] setion-name 設定name & 比較資料data 
4=如果NI DIO 取回的資料和data 相同則 TRUE 否則回傳 FALSE
5=   NIDIOREAD  MYDIO 233
6=可以存到變數中來判斷 NIDIOREAD  name = ABCD
7=再以 IF ( ABCD > 234 ) THEN @ERROR1 ELSE @ERROR2
8=NIDIOREAD  name = ABC >> 則會將資料也存到VAR.INI中的
9=savevar section的變數資料,最後會加到testlog.txtvar之中
10=不判斷對錯
11=NIDIOREAD  name DATA1 >> 會自行判斷對錯,會將資料存到VAR.INI
12=中的savevar section 的變數資料用errorcode為名稱,最後會加到
13=testlog.txtvar之中
99=DIO


[NIDIODIR]
C=4
1=NIDIODIR Name 
2=參考 DIO.INI  [NIDIODIRECT] setion & name 可以直接控制NI CARD
3=的IN OUT 的方向 ---> NIDIODIR PORT0
4=NIDIODIR PORT1 ,  NIDIODIR PORT3
99=NIDIODIRECT


[/*]
C=2
1=/*   */
2=大範圍的mark,其功能同c++的功能,需配合 */作為結束
99=0

[#]
C=2
1=#
2=單一行的mark
99=0

[RUNPCEXE]
C=2
1=RUNPCEXE DATA
2=DATA為執行檔在pc端的路徑,檔案名稱
99=0


[IF]
C=7
1=IF XXX  THEN @XXX  ELSE @XXX
2=每一個數之間要有空白, 字串前後要加 '  號 => 'abcd' 要有跳
3=的位置 THEN @abc ELSE @123  運算符號間要有空白區隔
4=只能往後跳,不能往前跳,要往前跳要配合JUMP來用
5=IF ( BOX1 = 'ABC' ) THEN @ABC ELSE @ERROR  字串比對BOX1是字串變數
6=IF ( BOX1 = BOX2 ) THEN @ABC ELSE @ERROR  字串比對BOX1,BOX2是字串變數
7=IF ( USB5V_1 > 4.75 ) AND ( USB5V_1 <  5.25 )     THEN @USB5V_11
99=0

[@NAME]
C=2
1=@NAME
2=Label 給jump 時使用IF& JUMP 都用的到
99=0

[JUMP]
C=2
1=JUMP @NAME
2=JUMP @123 跳到所標示的位置
99=0


[VARREAL]
C=5
1=VARREAL DATA
2=可事先宣告實數變數,或用來做實數的計算
3=VARREAL  ABC,DEF
4=VARREAL  HILL = DEF + (ABC -1) / 2
5=用於運算時變數必需先前宣告過,但結果變數 HILL則不必
99=0

[VARSTRING]
C=5
1=VARSTRING DATA
2=可事先宣告字串變數,或用來做字串的運算
3=VARSTRING   ABC,DEF
4=可存字串變數 VARSTRING  ABC = DEF + '1234567'其結果為 字串變數DEF加
5=上1234567的結果存到 ABC的變數字串中,如果DEF不存在則是給空字串
99=0


[VARRANGE]
C=5
1=VARRANGE NAME
2=可用於由先前存的變數值和 DIO.INI中[VARRANGE]中的值做比對,看是否在範
3=圍之內,但名稱必須要相同才能比較
4=VARRANGE ABC   必須在DIO.INI和VAR.INI中都存在 ABC這個變數才能
5=比較
99=VARRANGE

[UIMACRO]
C=4
1=UIMACRO NAME
2=可事先於 DIO.INI中的 [UIMACRO] 中定義所要的COMMAND,如此
3=可以簡單的命令來下達,可參考INIREADME
4=UIMACRO  PORWRON
99=UIMACRO

[TIMESTOP]
C=7
1=TIMESTOP DATA
2=可設定其多久程式要停止,當其時間到時會將VAR.INI中的 字串TIMESTOP=TURE
3=DATA ==>  ON stoptag  其stoptag 以分為計算單位  TIMESTOP ON 3 ==>表示
4=計時到三分鐘後結束
5=TIMESTOP OFF 則即時關掉計時
6=主要使用在AUTO RUN時做LOOP 要做多久的設定 
7=要設定AUTO時要設定Barcode.ini中的[logfile] 中的 AUTO=TRUE;
99=0


[ECHO]
C=2
1=ECHO DATA
2=可將DATA 的文字顯示到 LOG FILE 中  
99=0

